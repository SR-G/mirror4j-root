package org.tensin.mirror4j;

import java.io.File;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.reflections.Reflections;
import org.tensin.common.tools.documentation.updater.SimpleXMLDocumentation;
import org.tensin.common.tools.documentation.updater.SimpleXMLDocumentationOutputMarkdown;
import org.tensin.common.tools.documentation.updater.SimpleXMLDocumentationOutputXSD;
import org.tensin.mirror4j.model.configuration.Mirror4JConfiguration;
import org.tensin.mirror4j.model.operations.IOperation;

import com.beust.jcommander.JCommander;

/**
 * The Class UpdateDocumentation.
 */
public class UpdateDocumentation {

    /** TOKEN_README_PREFERENCES. */
    private static final String TOKEN_README_PREFERENCES = "AUTOGENERATED_CONTENT_PREFERENCES";

    /** TOKEN_README_PREFERENCES. */
    private static final String TOKEN_README_OPERATIONS = "AUTOGENERATED_CONTENT_OPERATIONS";

    /** The Constant TOKEN_README_OPERATIONS. */
    private static final String TOKEN_README_USAGE = "AUTOGENERATED_CONTENT_USAGE";

    /** SOURCE_XSD_PREFERENCES_FILENAME. */
    private static final String SOURCE_XSD_PREFERENCES_FILENAME = "../mirror4j/src/main/java/org/tensin/mirror4J/model/xsd/preferences.xsd";

    /** README_FILENAME. */
    private static final String README_FILENAME = "../README.md";

    /** Logger. */
    private static final Logger LOGGER = LogManager.getLogger();

    /**
     * The main method.
     * 
     * @param args
     *            the arguments
     * @throws Exception
     *             the exception
     */
    public static void main(final String[] args) throws Exception {

        // Update the references XSD stored in the code
        LOGGER.info("Now updating .xsd file definition [" + SOURCE_XSD_PREFERENCES_FILENAME + "]");
        SimpleXMLDocumentation.convert(Mirror4JConfiguration.class, SOURCE_XSD_PREFERENCES_FILENAME, new SimpleXMLDocumentationOutputXSD());

        // Update the README file with the configuration options and the operations
        LOGGER.info("Now adding options and operations text content");
        final SimpleXMLDocumentationOutputMarkdown output = new SimpleXMLDocumentationOutputMarkdown();

        output.setBaseReplacementToken(TOKEN_README_PREFERENCES);
        SimpleXMLDocumentation.convert(Mirror4JConfiguration.class, README_FILENAME, output);

        output.setBaseReplacementToken(TOKEN_README_OPERATIONS);
        final Reflections reflections = new Reflections("org.tensin");
        final StringBuilder sb = new StringBuilder();
        final List<Class<? extends IOperation>> operations = new ArrayList<Class<? extends IOperation>>();
        operations.addAll(reflections.getSubTypesOf(IOperation.class));
        Collections.sort(operations, new Comparator<Class<? extends IOperation>>() {

            @Override
            public int compare(final Class<? extends IOperation> o1, final Class<? extends IOperation> o2) {
                return o1.getSimpleName().compareTo(o2.getSimpleName());
            }

        });
        for (final Class<? extends IOperation> clazz : operations) {
            sb.append(SimpleXMLDocumentation.generateContent(clazz, output));
        }

        org.apache.commons.io.FileUtils.writeStringToFile(new File(README_FILENAME), output.mergeContent(sb.toString(), README_FILENAME));

        // Update the README with the "usage" help text
        LOGGER.info("Now adding 'usage' help text");
        output.setBaseReplacementToken(TOKEN_README_USAGE);
        final StringBuilder usage = new StringBuilder();
        final Starter starter = new Starter();
        final JCommander jCommander = new JCommander(starter, new String[] { "--help" });
        jCommander.usage(usage);
        org.apache.commons.io.FileUtils.writeStringToFile(new File(README_FILENAME), output.mergeContent(usage.toString(), README_FILENAME));

        LOGGER.info("Done.");
    }
}
